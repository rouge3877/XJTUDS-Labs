    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).    __uint8_t read_byte;
    int buffer_index = 0;
    bool *read_buffer = (bool *)malloc(BUFFER_MAX_FILE_SIZE * sizeof(__uint8_t) * 8 + 8);
    DecodeHuffmanTree *current_node = huffman;

    while (text_ch_num > 0 && fread(&read_byte, sizeof(__uint8_t), 1, input) == 1) {
        for (int i = 7; i >= 0; i--) {
            read_buffer[buffer_index] = (read_byte >> i) & 1;
            buffer_index++;

            // Traverse the Huffman tree based on the bits read
            if (read_buffer[buffer_index - 1] == 0) {
                current_node = current_node->_left;
            } else {
                current_node = current_node->_right;
            }

            // Check if a leaf node is reached
            if (current_node->_left == NULL && current_node->_right == NULL) {
                // Write the decoded character to the output file
                size_t elements_written = fwrite(&current_node->_data, sizeof(ORIGINAL_DATA_TYPE), 1, output);
                if (elements_written != 1) {
                    fprintf(stderr, "Error writing to the decompressed file!\n");
                    exit(0);
                }

                // Reset the current_node to the root for the next iteration
                current_node = huffman;
                text_ch_num--;
            }
        }
    }index!2?
2 0x5575706243ab in create_hash_table (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x73ab)
    #3 0x557570624b60 in Huffman_Uncompress (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x7b60)
    #4 0x557570623b36 in main (/home/rouge/cpp-repo/XJTUDS-Labs/Huffman/huffman_debug+0x6b36)
    #5 0x7f60848f8d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58

SUMMARY: AddressSanitizer: 2931 byte(s) leaked in 112 allocation(s).